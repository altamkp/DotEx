{
  "api/DotnetEx.Maths.ComparableExtensions.html": {
    "href": "api/DotnetEx.Maths.ComparableExtensions.html",
    "title": "Class ComparableExtensions | DotnetEx",
    "keywords": "Class ComparableExtensions Namespace DotnetEx.Maths Assembly DotnetEx.dll Extensions for IComparable. public static class ComparableExtensions Inheritance object ComparableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsBetween(IComparable, IComparable, IComparable) Checks if value is between the inclusive lower and upper limits. public static bool IsBetween(this IComparable value, IComparable lower, IComparable upper) Parameters value IComparable Value to check. lower IComparable Lower limit for reference. upper IComparable Upper limit for reference. Returns bool True if value is between or equal to the limits."
  },
  "api/DotnetEx.Maths.DoubleExtensions.html": {
    "href": "api/DotnetEx.Maths.DoubleExtensions.html",
    "title": "Class DoubleExtensions | DotnetEx",
    "keywords": "Class DoubleExtensions Namespace DotnetEx.Maths Assembly DotnetEx.dll Extensions for double. public static class DoubleExtensions Inheritance object DoubleExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsEqualApprox(double, double, double) Checks if the two values are approximately equal. public static bool IsEqualApprox(this double a, double b, double precision = 0.0010000000474974513) Parameters a double First value. b double Second value. precision double Precision to use. Returns bool True if the two values are approximately equal. IsZeroApprox(double, double) Checks if the value is approximately zero. public static bool IsZeroApprox(this double value, double precision = 0.0010000000474974513) Parameters value double Value to check. precision double Precision to use. Returns bool True if the value is approximately zero. Trim(double, double) Trims value to a given precision. public static double Trim(this double value, double precision = 0.0010000000474974513) Parameters value double Value to trim. precision double Precision to use. Returns double Trimmed value. Exceptions ArgumentOutOfRangeException precision is not positive and smaller than 1."
  },
  "api/DotnetEx.Maths.FloatExtensions.html": {
    "href": "api/DotnetEx.Maths.FloatExtensions.html",
    "title": "Class FloatExtensions | DotnetEx",
    "keywords": "Class FloatExtensions Namespace DotnetEx.Maths Assembly DotnetEx.dll Extensions for float. public static class FloatExtensions Inheritance object FloatExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsEqualApprox(float, float, float) Checks if the two values are approximately equal. public static bool IsEqualApprox(this float a, float b, float precision = 0.001) Parameters a float First value. b float Second value. precision float Precision to use. Returns bool True if the two values are approximately equal. IsZeroApprox(float, float) Checks if the value is approximately zero. public static bool IsZeroApprox(this float value, float precision = 0.001) Parameters value float Value to check. precision float Precision to use. Returns bool True if the value is approximately zero. Trim(float, float) Trims value to a given precision. public static float Trim(this float value, float precision = 0.001) Parameters value float Value to trim. precision float Precision to use. Returns float Trimmed value. Exceptions ArgumentOutOfRangeException precision is not positive and smaller than 1."
  },
  "api/DotnetEx.Maths.MathDef.html": {
    "href": "api/DotnetEx.Maths.MathDef.html",
    "title": "Class MathDef | DotnetEx",
    "keywords": "Class MathDef Namespace DotnetEx.Maths Assembly DotnetEx.dll Additional Math related definitions. public static class MathDef Inheritance object MathDef Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DEFAULT_PRECISION Default precision used for trimming and comparisons. public const float DEFAULT_PRECISION = 0.001 Field Value float"
  },
  "api/DotnetEx.Maths.html": {
    "href": "api/DotnetEx.Maths.html",
    "title": "Namespace DotnetEx.Maths | DotnetEx",
    "keywords": "Namespace DotnetEx.Maths Classes ComparableExtensions Extensions for IComparable. DoubleExtensions Extensions for double. FloatExtensions Extensions for float. MathDef Additional Math related definitions."
  },
  "api/DotnetEx.Reflections.AssemblyExtensions.html": {
    "href": "api/DotnetEx.Reflections.AssemblyExtensions.html",
    "title": "Class AssemblyExtensions | DotnetEx",
    "keywords": "Class AssemblyExtensions Namespace DotnetEx.Reflections Assembly DotnetEx.dll Extensions for Assembly. public static class AssemblyExtensions Inheritance object AssemblyExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetDerivedTypes(Assembly, Type, bool) Returns all derived types of the provided base type. Return abstract types if allowAbstract is true. public static IEnumerable<Type> GetDerivedTypes(this Assembly assembly, Type baseType, bool allowAbstract) Parameters assembly Assembly Assembly to search. baseType Type Base type to compare. allowAbstract bool Allow abstract derived types. Returns IEnumerable<Type> Derived types of the base type. GetDerivedTypes<T>(Assembly, bool) Returns all derived types of the provided base type. Return abstract types if allowAbstract is true. public static IEnumerable<Type> GetDerivedTypes<T>(this Assembly assembly, bool allowAbstract) Parameters assembly Assembly Assembly to search. allowAbstract bool Allow abstract derived types. Returns IEnumerable<Type> Derived types of the base type. Type Parameters T Base type to compare. GetTypesAndAttributes(Assembly, Type, bool) Returns all types and their respective attributes in the assembly annotated with the given attribute. Return abstract types if allowAbstract is true. public static IEnumerable<(Type type, Attribute[] attributes)> GetTypesAndAttributes(this Assembly assembly, Type attrType, bool allowAbstract = false) Parameters assembly Assembly Assembly to search. attrType Type Attribute to match. allowAbstract bool Allow abstract types, false by default Returns IEnumerable<(Type type, Attribute[] attributes)> Types with the given attribute defined, together with their respective attributes. GetTypesAndAttributes<T>(Assembly, bool) Returns all types and their respective attributes in the assembly annotated with the given attribute. Return abstract types if allowAbstract is true. public static IEnumerable<(Type type, T[] attributes)> GetTypesAndAttributes<T>(this Assembly assembly, bool allowAbstract = false) where T : Attribute Parameters assembly Assembly Assembly to search. allowAbstract bool Allow abstract types, false by default Returns IEnumerable<(Type type, T[] attributes)> Types with the given attribute defined. Type Parameters T Attribute to match. GetTypesWithAttribute(Assembly, Type, bool) Returns all types in the assembly annotated with the given attribute. Return abstract types if allowAbstract is true. public static IEnumerable<Type> GetTypesWithAttribute(this Assembly assembly, Type attrType, bool allowAbstract = false) Parameters assembly Assembly Assembly to search. attrType Type Attribute to match. allowAbstract bool Allow abstract types, false by default Returns IEnumerable<Type> Types with the given attribute defined. GetTypesWithAttribute<T>(Assembly, bool) Returns all types in the assembly annotated with the given attribute. Return abstract types if allowAbstract is true. public static IEnumerable<Type> GetTypesWithAttribute<T>(this Assembly assembly, bool allowAbstract = false) where T : Attribute Parameters assembly Assembly Assembly to search. allowAbstract bool Allow abstract types, false by default Returns IEnumerable<Type> Types with the given attribute defined. Type Parameters T Attribute to match."
  },
  "api/DotnetEx.Reflections.MemberInfoExtensions.html": {
    "href": "api/DotnetEx.Reflections.MemberInfoExtensions.html",
    "title": "Class MemberInfoExtensions | DotnetEx",
    "keywords": "Class MemberInfoExtensions Namespace DotnetEx.Reflections Assembly DotnetEx.dll Extensions for MemberInfo. public static class MemberInfoExtensions Inheritance object MemberInfoExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetMemberType(MemberInfo) Gets the type of this member. public static Type GetMemberType(this MemberInfo memberInfo) Parameters memberInfo MemberInfo Member info object. Returns Type Type of this member. Exceptions ArgumentException Member other that property, field, or method is provided. GetValue(MemberInfo, object) Returns the property/field value of a specified object. public static object? GetValue(this MemberInfo memberInfo, object target) Parameters memberInfo MemberInfo Member info object target object Target object to inspect. Returns object Property of field value. Exceptions ArgumentException Member other that property or field is provided. IsDefined<TAttribute>(MemberInfo) Indicates whether custom attributes of a specified type are applied to a specified member. public static bool IsDefined<TAttribute>(this MemberInfo memberInfo) where TAttribute : Attribute Parameters memberInfo MemberInfo Member to inspect. Returns bool True if an attribute of the specified type is applied to element, otherwise false. Type Parameters TAttribute The type of the attribute to search for. IsDefined<TAttribute>(MemberInfo, bool) Indicates whether custom attributes of a specified type are applied to a specified member, and, optionally, applied to its ancestors. public static bool IsDefined<TAttribute>(this MemberInfo memberInfo, bool inherit) where TAttribute : Attribute Parameters memberInfo MemberInfo Member to inspect. inherit bool True to inspect the ancestors of element; otherwise, false. Returns bool True if an attribute of the specified type is applied to element, otherwise false. Type Parameters TAttribute The type of the attribute to search for. SetValue(MemberInfo, object, object) Sets the property or field value of a specified target object, accepts PropertyInfo or FieldInfo only. public static void SetValue(this MemberInfo memberInfo, object target, object value) Parameters memberInfo MemberInfo Member info object. target object Target object to set. value object Value to set. Exceptions ArgumentException Member other that property or field is provided."
  },
  "api/DotnetEx.Reflections.TypeExtensions.html": {
    "href": "api/DotnetEx.Reflections.TypeExtensions.html",
    "title": "Class TypeExtensions | DotnetEx",
    "keywords": "Class TypeExtensions Namespace DotnetEx.Reflections Assembly DotnetEx.dll Extensions for Type. public static class TypeExtensions Inheritance object TypeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetFieldsAndAttributes(Type, Type, BindingFlags?) Returns all fields and their respective attributes in the type annotated with the given attribute. public static IEnumerable<(FieldInfo memberInfo, Attribute[] attributes)> GetFieldsAndAttributes(this Type type, Type attrType, BindingFlags? flags = null) Parameters type Type Type to search. attrType Type Attribute to match. flags BindingFlags? Binding flags to match. Returns IEnumerable<(FieldInfo memberInfo, Attribute[] attributes)> Fields with the given attribute defined, together with the respective attributes.. GetFieldsAndAttributes<T>(Type, BindingFlags?) Returns all fields and their respective attributes in the type annotated with the given attribute. public static IEnumerable<(FieldInfo memberInfo, T[] attributes)> GetFieldsAndAttributes<T>(this Type type, BindingFlags? flags = null) where T : Attribute Parameters type Type Attribute to match. flags BindingFlags? Binding flags to match. Returns IEnumerable<(FieldInfo memberInfo, T[] attributes)> Fields with the given attribute defined, together with the respective attributes.. Type Parameters T Type to search. GetFieldsWithAttribute(Type, Type, BindingFlags?) Returns all fields in the type annotated with the given attribute. public static IEnumerable<FieldInfo> GetFieldsWithAttribute(this Type type, Type attrType, BindingFlags? flags = null) Parameters type Type Type to search. attrType Type Attribute to match. flags BindingFlags? Binding flags to match. Returns IEnumerable<FieldInfo> Fields with the given attribute defined. GetFieldsWithAttribute<T>(Type, BindingFlags?) Returns all fields in the type annotated with the given attribute. public static IEnumerable<FieldInfo> GetFieldsWithAttribute<T>(this Type type, BindingFlags? flags = null) where T : Attribute Parameters type Type Attribute to match. flags BindingFlags? Binding flags to match. Returns IEnumerable<FieldInfo> Fields with the given attribute defined. Type Parameters T Type to search. GetGenericInterfaceType(Type, Type) Gets the interface type from genericInterfaceType. public static Type GetGenericInterfaceType(this Type type, Type genericInterfaceType) Parameters type Type Type to inspect. genericInterfaceType Type Generic interface type to match. Returns Type Exceptions ArgumentException type does not implement genericInterfaceType GetMembersAndAttributes(Type, Type, BindingFlags?) Returns all members and their respective attributes in the type annotated with the given attribute. public static IEnumerable<(MemberInfo memberInfo, Attribute[] attributes)> GetMembersAndAttributes(this Type type, Type attrType, BindingFlags? flags = null) Parameters type Type Type to search. attrType Type Attribute to match. flags BindingFlags? Binding flags to match. Returns IEnumerable<(MemberInfo memberInfo, Attribute[] attributes)> Members with the given attribute defined, together with the respective attributes.. GetMembersAndAttributes<T>(Type, BindingFlags?) Returns all members and their respective attributes in the type annotated with the given attribute. public static IEnumerable<(MemberInfo memberInfo, T[] attributes)> GetMembersAndAttributes<T>(this Type type, BindingFlags? flags = null) where T : Attribute Parameters type Type Attribute to match. flags BindingFlags? Binding flags to match. Returns IEnumerable<(MemberInfo memberInfo, T[] attributes)> Members with the given attribute defined, together with the respective attributes.. Type Parameters T Type to search. GetMembersWithAttribute(Type, Type, BindingFlags?) Returns all members in the type annotated with the given attribute. public static IEnumerable<MemberInfo> GetMembersWithAttribute(this Type type, Type attrType, BindingFlags? flags = null) Parameters type Type Type to search. attrType Type Attribute to match. flags BindingFlags? Binding flags to match. Returns IEnumerable<MemberInfo> Members with the given attribute defined. GetMembersWithAttribute<T>(Type, BindingFlags?) Returns all members in the type annotated with the given attribute. public static IEnumerable<MemberInfo> GetMembersWithAttribute<T>(this Type type, BindingFlags? flags = null) where T : Attribute Parameters type Type Attribute to match. flags BindingFlags? Binding flags to match. Returns IEnumerable<MemberInfo> Members with the given attribute defined. Type Parameters T Type to search. GetMethodsAndAttributes(Type, Type, BindingFlags?) Returns all methods and their respective attributes in the type annotated with the given attribute. public static IEnumerable<(MethodInfo memberInfo, Attribute[] attributes)> GetMethodsAndAttributes(this Type type, Type attrType, BindingFlags? flags = null) Parameters type Type Type to search. attrType Type Attribute to match. flags BindingFlags? Binding flags to match. Returns IEnumerable<(MethodInfo memberInfo, Attribute[] attributes)> Methods with the given attribute defined, together with the respective attributes.. GetMethodsAndAttributes<T>(Type, BindingFlags?) Returns all methods and their respective attributes in the type annotated with the given attribute. public static IEnumerable<(MethodInfo memberInfo, T[] attributes)> GetMethodsAndAttributes<T>(this Type type, BindingFlags? flags = null) where T : Attribute Parameters type Type Attribute to match. flags BindingFlags? Binding flags to match. Returns IEnumerable<(MethodInfo memberInfo, T[] attributes)> Methods with the given attribute defined, together with the respective attributes.. Type Parameters T Type to search. GetMethodsWithAttribute(Type, Type, BindingFlags?) Returns all methods in the type annotated with the given attribute. public static IEnumerable<MethodInfo> GetMethodsWithAttribute(this Type type, Type attrType, BindingFlags? flags = null) Parameters type Type Type to search. attrType Type Attribute to match. flags BindingFlags? Binding flags to match. Returns IEnumerable<MethodInfo> Methods with the given attribute defined. GetMethodsWithAttribute<T>(Type, BindingFlags?) Returns all methods in the type annotated with the given attribute. public static IEnumerable<MethodInfo> GetMethodsWithAttribute<T>(this Type type, BindingFlags? flags = null) where T : Attribute Parameters type Type Attribute to match. flags BindingFlags? Binding flags to match. Returns IEnumerable<MethodInfo> Methods with the given attribute defined. Type Parameters T Type to search. GetPropertiesAndAttributes(Type, Type, BindingFlags?) Returns all properties and their respective attributes in the type annotated with the given attribute. public static IEnumerable<(PropertyInfo memberInfo, Attribute[] attributes)> GetPropertiesAndAttributes(this Type type, Type attrType, BindingFlags? flags = null) Parameters type Type Type to search. attrType Type Attribute to match. flags BindingFlags? Binding flags to match. Returns IEnumerable<(PropertyInfo memberInfo, Attribute[] attributes)> Properties with the given attribute defined, together with the respective attributes.. GetPropertiesAndAttributes<T>(Type, BindingFlags?) Returns all properties and their respective attributes in the type annotated with the given attribute. public static IEnumerable<(PropertyInfo memberInfo, T[] attributes)> GetPropertiesAndAttributes<T>(this Type type, BindingFlags? flags = null) where T : Attribute Parameters type Type Attribute to match. flags BindingFlags? Binding flags to match. Returns IEnumerable<(PropertyInfo memberInfo, T[] attributes)> Properties with the given attribute defined, together with the respective attributes.. Type Parameters T Type to search. GetPropertiesWithAttribute(Type, Type, BindingFlags?) Returns all properties in the type annotated with the given attribute. public static IEnumerable<PropertyInfo> GetPropertiesWithAttribute(this Type type, Type attrType, BindingFlags? flags = null) Parameters type Type Type to search. attrType Type Attribute to match. flags BindingFlags? Binding flags to match. Returns IEnumerable<PropertyInfo> Properties with the given attribute defined. GetPropertiesWithAttribute<T>(Type, BindingFlags?) Returns all properties in the type annotated with the given attribute. public static IEnumerable<PropertyInfo> GetPropertiesWithAttribute<T>(this Type type, BindingFlags? flags = null) where T : Attribute Parameters type Type Attribute to match. flags BindingFlags? Binding flags to match. Returns IEnumerable<PropertyInfo> Properties with the given attribute defined. Type Parameters T Type to search. TryGetGenericInterfaceType(Type, Type, out Type?) Checks if type implements genericInterfaceType. public static bool TryGetGenericInterfaceType(this Type type, Type genericInterfaceType, out Type? interfaceType) Parameters type Type Type to inspect. genericInterfaceType Type Generic interface type to match. interfaceType Type Interface type if successfully matched, otherwise null. Returns bool True if interface type successfully matched, otherwise false. Exceptions ArgumentException genericInterfaceType is not a generic interface type."
  },
  "api/DotnetEx.Reflections.html": {
    "href": "api/DotnetEx.Reflections.html",
    "title": "Namespace DotnetEx.Reflections | DotnetEx",
    "keywords": "Namespace DotnetEx.Reflections Classes AssemblyExtensions Extensions for Assembly. MemberInfoExtensions Extensions for MemberInfo. TypeExtensions Extensions for Type."
  },
  "index.html": {
    "href": "index.html",
    "title": "DotnetEx | DotnetEx",
    "keywords": "DotnetEx Dotnet Extras provides a set of extension methods for .Net in C#. Currently available extensions: Maths Reflections License Available under the MIT License. Copyright Copyright (c) 2024 altamkp"
  }
}