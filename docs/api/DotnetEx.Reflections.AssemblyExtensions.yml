### YamlMime:ManagedReference
items:
- uid: DotnetEx.Reflections.AssemblyExtensions
  commentId: T:DotnetEx.Reflections.AssemblyExtensions
  id: AssemblyExtensions
  parent: DotnetEx.Reflections
  children:
  - DotnetEx.Reflections.AssemblyExtensions.GetDerivedTypes(System.Reflection.Assembly,System.Type,System.Boolean)
  - DotnetEx.Reflections.AssemblyExtensions.GetDerivedTypes``1(System.Reflection.Assembly,System.Boolean)
  - DotnetEx.Reflections.AssemblyExtensions.GetTypesAndAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
  - DotnetEx.Reflections.AssemblyExtensions.GetTypesAndAttributes``1(System.Reflection.Assembly,System.Boolean)
  - DotnetEx.Reflections.AssemblyExtensions.GetTypesWithAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
  - DotnetEx.Reflections.AssemblyExtensions.GetTypesWithAttribute``1(System.Reflection.Assembly,System.Boolean)
  langs:
  - csharp
  - vb
  name: AssemblyExtensions
  nameWithType: AssemblyExtensions
  fullName: DotnetEx.Reflections.AssemblyExtensions
  type: Class
  source:
    remote:
      path: src/Reflections/AssemblyExtensions.cs
      branch: master
      repo: https://github.com/altamkp/DotnetEx.git
    id: AssemblyExtensions
    path: ../src/Reflections/AssemblyExtensions.cs
    startLine: 7
  assemblies:
  - DotnetEx
  namespace: DotnetEx.Reflections
  summary: Extensions for <xref href="System.Reflection.Assembly" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static class AssemblyExtensions
    content.vb: Public Module AssemblyExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: DotnetEx.Reflections.AssemblyExtensions.GetDerivedTypes(System.Reflection.Assembly,System.Type,System.Boolean)
  commentId: M:DotnetEx.Reflections.AssemblyExtensions.GetDerivedTypes(System.Reflection.Assembly,System.Type,System.Boolean)
  id: GetDerivedTypes(System.Reflection.Assembly,System.Type,System.Boolean)
  isExtensionMethod: true
  parent: DotnetEx.Reflections.AssemblyExtensions
  langs:
  - csharp
  - vb
  name: GetDerivedTypes(Assembly, Type, bool)
  nameWithType: AssemblyExtensions.GetDerivedTypes(Assembly, Type, bool)
  fullName: DotnetEx.Reflections.AssemblyExtensions.GetDerivedTypes(System.Reflection.Assembly, System.Type, bool)
  type: Method
  source:
    remote:
      path: src/Reflections/AssemblyExtensions.cs
      branch: master
      repo: https://github.com/altamkp/DotnetEx.git
    id: GetDerivedTypes
    path: ../src/Reflections/AssemblyExtensions.cs
    startLine: 16
  assemblies:
  - DotnetEx
  namespace: DotnetEx.Reflections
  summary: >-
    Returns all derived types of the provided base type. Return abstract types if

    <code class="paramref">allowAbstract</code> is true.
  example: []
  syntax:
    content: public static IEnumerable<Type> GetDerivedTypes(this Assembly assembly, Type baseType, bool allowAbstract)
    parameters:
    - id: assembly
      type: System.Reflection.Assembly
      description: Assembly to search.
    - id: baseType
      type: System.Type
      description: Base type to compare.
    - id: allowAbstract
      type: System.Boolean
      description: Allow abstract derived types.
    return:
      type: System.Collections.Generic.IEnumerable{System.Type}
      description: Derived types of the base type.
    content.vb: Public Shared Function GetDerivedTypes(assembly As Assembly, baseType As Type, allowAbstract As Boolean) As IEnumerable(Of Type)
  overload: DotnetEx.Reflections.AssemblyExtensions.GetDerivedTypes*
  nameWithType.vb: AssemblyExtensions.GetDerivedTypes(Assembly, Type, Boolean)
  fullName.vb: DotnetEx.Reflections.AssemblyExtensions.GetDerivedTypes(System.Reflection.Assembly, System.Type, Boolean)
  name.vb: GetDerivedTypes(Assembly, Type, Boolean)
- uid: DotnetEx.Reflections.AssemblyExtensions.GetDerivedTypes``1(System.Reflection.Assembly,System.Boolean)
  commentId: M:DotnetEx.Reflections.AssemblyExtensions.GetDerivedTypes``1(System.Reflection.Assembly,System.Boolean)
  id: GetDerivedTypes``1(System.Reflection.Assembly,System.Boolean)
  isExtensionMethod: true
  parent: DotnetEx.Reflections.AssemblyExtensions
  langs:
  - csharp
  - vb
  name: GetDerivedTypes<T>(Assembly, bool)
  nameWithType: AssemblyExtensions.GetDerivedTypes<T>(Assembly, bool)
  fullName: DotnetEx.Reflections.AssemblyExtensions.GetDerivedTypes<T>(System.Reflection.Assembly, bool)
  type: Method
  source:
    remote:
      path: src/Reflections/AssemblyExtensions.cs
      branch: master
      repo: https://github.com/altamkp/DotnetEx.git
    id: GetDerivedTypes
    path: ../src/Reflections/AssemblyExtensions.cs
    startLine: 29
  assemblies:
  - DotnetEx
  namespace: DotnetEx.Reflections
  summary: >-
    Returns all derived types of the provided base type. Return abstract types if

    <code class="paramref">allowAbstract</code> is true.
  example: []
  syntax:
    content: public static IEnumerable<Type> GetDerivedTypes<T>(this Assembly assembly, bool allowAbstract)
    parameters:
    - id: assembly
      type: System.Reflection.Assembly
      description: Assembly to search.
    - id: allowAbstract
      type: System.Boolean
      description: Allow abstract derived types.
    typeParameters:
    - id: T
      description: Base type to compare.
    return:
      type: System.Collections.Generic.IEnumerable{System.Type}
      description: Derived types of the base type.
    content.vb: Public Shared Function GetDerivedTypes(Of T)(assembly As Assembly, allowAbstract As Boolean) As IEnumerable(Of Type)
  overload: DotnetEx.Reflections.AssemblyExtensions.GetDerivedTypes*
  nameWithType.vb: AssemblyExtensions.GetDerivedTypes(Of T)(Assembly, Boolean)
  fullName.vb: DotnetEx.Reflections.AssemblyExtensions.GetDerivedTypes(Of T)(System.Reflection.Assembly, Boolean)
  name.vb: GetDerivedTypes(Of T)(Assembly, Boolean)
- uid: DotnetEx.Reflections.AssemblyExtensions.GetTypesWithAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
  commentId: M:DotnetEx.Reflections.AssemblyExtensions.GetTypesWithAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
  id: GetTypesWithAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
  isExtensionMethod: true
  parent: DotnetEx.Reflections.AssemblyExtensions
  langs:
  - csharp
  - vb
  name: GetTypesWithAttribute(Assembly, Type, bool)
  nameWithType: AssemblyExtensions.GetTypesWithAttribute(Assembly, Type, bool)
  fullName: DotnetEx.Reflections.AssemblyExtensions.GetTypesWithAttribute(System.Reflection.Assembly, System.Type, bool)
  type: Method
  source:
    remote:
      path: src/Reflections/AssemblyExtensions.cs
      branch: master
      repo: https://github.com/altamkp/DotnetEx.git
    id: GetTypesWithAttribute
    path: ../src/Reflections/AssemblyExtensions.cs
    startLine: 43
  assemblies:
  - DotnetEx
  namespace: DotnetEx.Reflections
  summary: >-
    Returns all types in the assembly annotated with the given attribute. Return abstract 

    types if <code class="paramref">allowAbstract</code> is true.
  example: []
  syntax:
    content: public static IEnumerable<Type> GetTypesWithAttribute(this Assembly assembly, Type attrType, bool allowAbstract = false)
    parameters:
    - id: assembly
      type: System.Reflection.Assembly
      description: Assembly to search.
    - id: attrType
      type: System.Type
      description: Attribute to match.
    - id: allowAbstract
      type: System.Boolean
      description: Allow abstract types, false by default
    return:
      type: System.Collections.Generic.IEnumerable{System.Type}
      description: Types with the given attribute defined.
    content.vb: Public Shared Function GetTypesWithAttribute(assembly As Assembly, attrType As Type, allowAbstract As Boolean = False) As IEnumerable(Of Type)
  overload: DotnetEx.Reflections.AssemblyExtensions.GetTypesWithAttribute*
  nameWithType.vb: AssemblyExtensions.GetTypesWithAttribute(Assembly, Type, Boolean)
  fullName.vb: DotnetEx.Reflections.AssemblyExtensions.GetTypesWithAttribute(System.Reflection.Assembly, System.Type, Boolean)
  name.vb: GetTypesWithAttribute(Assembly, Type, Boolean)
- uid: DotnetEx.Reflections.AssemblyExtensions.GetTypesWithAttribute``1(System.Reflection.Assembly,System.Boolean)
  commentId: M:DotnetEx.Reflections.AssemblyExtensions.GetTypesWithAttribute``1(System.Reflection.Assembly,System.Boolean)
  id: GetTypesWithAttribute``1(System.Reflection.Assembly,System.Boolean)
  isExtensionMethod: true
  parent: DotnetEx.Reflections.AssemblyExtensions
  langs:
  - csharp
  - vb
  name: GetTypesWithAttribute<T>(Assembly, bool)
  nameWithType: AssemblyExtensions.GetTypesWithAttribute<T>(Assembly, bool)
  fullName: DotnetEx.Reflections.AssemblyExtensions.GetTypesWithAttribute<T>(System.Reflection.Assembly, bool)
  type: Method
  source:
    remote:
      path: src/Reflections/AssemblyExtensions.cs
      branch: master
      repo: https://github.com/altamkp/DotnetEx.git
    id: GetTypesWithAttribute
    path: ../src/Reflections/AssemblyExtensions.cs
    startLine: 56
  assemblies:
  - DotnetEx
  namespace: DotnetEx.Reflections
  summary: >-
    Returns all types in the assembly annotated with the given attribute. Return abstract 

    types if <code class="paramref">allowAbstract</code> is true.
  example: []
  syntax:
    content: 'public static IEnumerable<Type> GetTypesWithAttribute<T>(this Assembly assembly, bool allowAbstract = false) where T : Attribute'
    parameters:
    - id: assembly
      type: System.Reflection.Assembly
      description: Assembly to search.
    - id: allowAbstract
      type: System.Boolean
      description: Allow abstract types, false by default
    typeParameters:
    - id: T
      description: Attribute to match.
    return:
      type: System.Collections.Generic.IEnumerable{System.Type}
      description: Types with the given attribute defined.
    content.vb: Public Shared Function GetTypesWithAttribute(Of T As Attribute)(assembly As Assembly, allowAbstract As Boolean = False) As IEnumerable(Of Type)
  overload: DotnetEx.Reflections.AssemblyExtensions.GetTypesWithAttribute*
  nameWithType.vb: AssemblyExtensions.GetTypesWithAttribute(Of T)(Assembly, Boolean)
  fullName.vb: DotnetEx.Reflections.AssemblyExtensions.GetTypesWithAttribute(Of T)(System.Reflection.Assembly, Boolean)
  name.vb: GetTypesWithAttribute(Of T)(Assembly, Boolean)
- uid: DotnetEx.Reflections.AssemblyExtensions.GetTypesAndAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
  commentId: M:DotnetEx.Reflections.AssemblyExtensions.GetTypesAndAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
  id: GetTypesAndAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
  isExtensionMethod: true
  parent: DotnetEx.Reflections.AssemblyExtensions
  langs:
  - csharp
  - vb
  name: GetTypesAndAttributes(Assembly, Type, bool)
  nameWithType: AssemblyExtensions.GetTypesAndAttributes(Assembly, Type, bool)
  fullName: DotnetEx.Reflections.AssemblyExtensions.GetTypesAndAttributes(System.Reflection.Assembly, System.Type, bool)
  type: Method
  source:
    remote:
      path: src/Reflections/AssemblyExtensions.cs
      branch: master
      repo: https://github.com/altamkp/DotnetEx.git
    id: GetTypesAndAttributes
    path: ../src/Reflections/AssemblyExtensions.cs
    startLine: 69
  assemblies:
  - DotnetEx
  namespace: DotnetEx.Reflections
  summary: >-
    Returns all types and their respective attributes in the assembly annotated with the given attribute. 

    Return abstract types if <code class="paramref">allowAbstract</code> is true.
  example: []
  syntax:
    content: public static IEnumerable<(Type type, Attribute[] attributes)> GetTypesAndAttributes(this Assembly assembly, Type attrType, bool allowAbstract = false)
    parameters:
    - id: assembly
      type: System.Reflection.Assembly
      description: Assembly to search.
    - id: attrType
      type: System.Type
      description: Attribute to match.
    - id: allowAbstract
      type: System.Boolean
      description: Allow abstract types, false by default
    return:
      type: System.Collections.Generic.IEnumerable{System.ValueTuple{System.Type,System.Attribute[]}}
      description: Types with the given attribute defined, together with their respective attributes.
    content.vb: Public Shared Function GetTypesAndAttributes(assembly As Assembly, attrType As Type, allowAbstract As Boolean = False) As IEnumerable(Of (type As Type, attributes As Attribute()))
  overload: DotnetEx.Reflections.AssemblyExtensions.GetTypesAndAttributes*
  nameWithType.vb: AssemblyExtensions.GetTypesAndAttributes(Assembly, Type, Boolean)
  fullName.vb: DotnetEx.Reflections.AssemblyExtensions.GetTypesAndAttributes(System.Reflection.Assembly, System.Type, Boolean)
  name.vb: GetTypesAndAttributes(Assembly, Type, Boolean)
- uid: DotnetEx.Reflections.AssemblyExtensions.GetTypesAndAttributes``1(System.Reflection.Assembly,System.Boolean)
  commentId: M:DotnetEx.Reflections.AssemblyExtensions.GetTypesAndAttributes``1(System.Reflection.Assembly,System.Boolean)
  id: GetTypesAndAttributes``1(System.Reflection.Assembly,System.Boolean)
  isExtensionMethod: true
  parent: DotnetEx.Reflections.AssemblyExtensions
  langs:
  - csharp
  - vb
  name: GetTypesAndAttributes<T>(Assembly, bool)
  nameWithType: AssemblyExtensions.GetTypesAndAttributes<T>(Assembly, bool)
  fullName: DotnetEx.Reflections.AssemblyExtensions.GetTypesAndAttributes<T>(System.Reflection.Assembly, bool)
  type: Method
  source:
    remote:
      path: src/Reflections/AssemblyExtensions.cs
      branch: master
      repo: https://github.com/altamkp/DotnetEx.git
    id: GetTypesAndAttributes
    path: ../src/Reflections/AssemblyExtensions.cs
    startLine: 87
  assemblies:
  - DotnetEx
  namespace: DotnetEx.Reflections
  summary: >-
    Returns all types and their respective attributes in the assembly annotated with the given attribute. 

    Return abstract types if <code class="paramref">allowAbstract</code> is true.
  example: []
  syntax:
    content: 'public static IEnumerable<(Type type, T[] attributes)> GetTypesAndAttributes<T>(this Assembly assembly, bool allowAbstract = false) where T : Attribute'
    parameters:
    - id: assembly
      type: System.Reflection.Assembly
      description: Assembly to search.
    - id: allowAbstract
      type: System.Boolean
      description: Allow abstract types, false by default
    typeParameters:
    - id: T
      description: Attribute to match.
    return:
      type: System.Collections.Generic.IEnumerable{System.ValueTuple{System.Type,{T}[]}}
      description: Types with the given attribute defined.
    content.vb: Public Shared Function GetTypesAndAttributes(Of T As Attribute)(assembly As Assembly, allowAbstract As Boolean = False) As IEnumerable(Of (type As Type, attributes As T()))
  overload: DotnetEx.Reflections.AssemblyExtensions.GetTypesAndAttributes*
  nameWithType.vb: AssemblyExtensions.GetTypesAndAttributes(Of T)(Assembly, Boolean)
  fullName.vb: DotnetEx.Reflections.AssemblyExtensions.GetTypesAndAttributes(Of T)(System.Reflection.Assembly, Boolean)
  name.vb: GetTypesAndAttributes(Of T)(Assembly, Boolean)
references:
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.reflection.assembly
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: DotnetEx.Reflections
  commentId: N:DotnetEx.Reflections
  href: DotnetEx.html
  name: DotnetEx.Reflections
  nameWithType: DotnetEx.Reflections
  fullName: DotnetEx.Reflections
  spec.csharp:
  - uid: DotnetEx
    name: DotnetEx
    href: DotnetEx.html
  - name: .
  - uid: DotnetEx.Reflections
    name: Reflections
    href: DotnetEx.Reflections.html
  spec.vb:
  - uid: DotnetEx
    name: DotnetEx
    href: DotnetEx.html
  - name: .
  - uid: DotnetEx.Reflections
    name: Reflections
    href: DotnetEx.Reflections.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Reflection
    name: Reflection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.reflection
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Reflection
    name: Reflection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.reflection
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: DotnetEx.Reflections.AssemblyExtensions.GetDerivedTypes*
  commentId: Overload:DotnetEx.Reflections.AssemblyExtensions.GetDerivedTypes
  href: DotnetEx.Reflections.AssemblyExtensions.html#DotnetEx_Reflections_AssemblyExtensions_GetDerivedTypes_System_Reflection_Assembly_System_Type_System_Boolean_
  name: GetDerivedTypes
  nameWithType: AssemblyExtensions.GetDerivedTypes
  fullName: DotnetEx.Reflections.AssemblyExtensions.GetDerivedTypes
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Collections.Generic.IEnumerable{System.Type}
  commentId: T:System.Collections.Generic.IEnumerable{System.Type}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Type>
  nameWithType: IEnumerable<Type>
  fullName: System.Collections.Generic.IEnumerable<System.Type>
  nameWithType.vb: IEnumerable(Of Type)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Type)
  name.vb: IEnumerable(Of Type)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: DotnetEx.Reflections.AssemblyExtensions.GetTypesWithAttribute*
  commentId: Overload:DotnetEx.Reflections.AssemblyExtensions.GetTypesWithAttribute
  href: DotnetEx.Reflections.AssemblyExtensions.html#DotnetEx_Reflections_AssemblyExtensions_GetTypesWithAttribute_System_Reflection_Assembly_System_Type_System_Boolean_
  name: GetTypesWithAttribute
  nameWithType: AssemblyExtensions.GetTypesWithAttribute
  fullName: DotnetEx.Reflections.AssemblyExtensions.GetTypesWithAttribute
- uid: DotnetEx.Reflections.AssemblyExtensions.GetTypesAndAttributes*
  commentId: Overload:DotnetEx.Reflections.AssemblyExtensions.GetTypesAndAttributes
  href: DotnetEx.Reflections.AssemblyExtensions.html#DotnetEx_Reflections_AssemblyExtensions_GetTypesAndAttributes_System_Reflection_Assembly_System_Type_System_Boolean_
  name: GetTypesAndAttributes
  nameWithType: AssemblyExtensions.GetTypesAndAttributes
  fullName: DotnetEx.Reflections.AssemblyExtensions.GetTypesAndAttributes
- uid: System.Collections.Generic.IEnumerable{System.ValueTuple{System.Type,System.Attribute[]}}
  commentId: T:System.Collections.Generic.IEnumerable{System.ValueTuple{System.Type,System.Attribute[]}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<(Type type, Attribute[] attributes)>
  nameWithType: IEnumerable<(Type type, Attribute[] attributes)>
  fullName: System.Collections.Generic.IEnumerable<(System.Type type, System.Attribute[] attributes)>
  nameWithType.vb: IEnumerable(Of (type As Type, attributes As Attribute()))
  fullName.vb: System.Collections.Generic.IEnumerable(Of (type As System.Type, attributes As System.Attribute()))
  name.vb: IEnumerable(Of (type As Type, attributes As Attribute()))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: " "
  - uid: System.ValueTuple{System.Type,System.Attribute[]}.type
    name: type
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.type,system.attribute[]-.type
  - name: ','
  - name: " "
  - uid: System.Attribute
    name: Attribute
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.attribute
  - name: '['
  - name: ']'
  - name: " "
  - uid: System.ValueTuple{System.Type,System.Attribute[]}.attributes
    name: attributes
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.type,system.attribute[]-.attributes
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{System.Type,System.Attribute[]}.type
    name: type
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.type,system.attribute[]-.type
  - name: " "
  - name: As
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Type,System.Attribute[]}.attributes
    name: attributes
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.type,system.attribute[]-.attributes
  - name: " "
  - name: As
  - name: " "
  - uid: System.Attribute
    name: Attribute
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.attribute
  - name: (
  - name: )
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable{System.ValueTuple{System.Type,{T}[]}}
  commentId: T:System.Collections.Generic.IEnumerable{System.ValueTuple{System.Type,``0[]}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<(Type type, T[] attributes)>
  nameWithType: IEnumerable<(Type type, T[] attributes)>
  fullName: System.Collections.Generic.IEnumerable<(System.Type type, T[] attributes)>
  nameWithType.vb: IEnumerable(Of (type As Type, attributes As T()))
  fullName.vb: System.Collections.Generic.IEnumerable(Of (type As System.Type, attributes As T()))
  name.vb: IEnumerable(Of (type As Type, attributes As T()))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: " "
  - uid: System.ValueTuple{System.Type,``0[]}.type
    name: type
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.type,--0[]-.type
  - name: ','
  - name: " "
  - name: T
  - name: '['
  - name: ']'
  - name: " "
  - uid: System.ValueTuple{System.Type,``0[]}.attributes
    name: attributes
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.type,--0[]-.attributes
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{System.Type,``0[]}.type
    name: type
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.type,--0[]-.type
  - name: " "
  - name: As
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Type,``0[]}.attributes
    name: attributes
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.type,--0[]-.attributes
  - name: " "
  - name: As
  - name: " "
  - name: T
  - name: (
  - name: )
  - name: )
  - name: )
